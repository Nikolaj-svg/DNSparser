# main.py

import time
import os
import json
import pandas as pd
from tqdm import tqdm
from selenium.common.exceptions import WebDriverException
from parser.utils import make_driver
from parser.selenium_uc import grab_cards, get_total_items
from parser.fetch_full_data import full_product

CATEGORY_LINKS = {
    "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã":        "https://www.dns-shop.ru/catalog/17a899cd16404e77/processory/?stock=now-today-tomorrow-later-out_of_stock",
    "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã": "https://www.dns-shop.ru/catalog/17a89a0416404e77/materinskie-platy/?stock=now-today-tomorrow-later-out_of_stock",
    "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã":        "https://www.dns-shop.ru/catalog/17a89aab16404e77/videokarty/?stock=now-today-tomorrow-later-out_of_stock",
    "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å dimm" : "https://www.dns-shop.ru/catalog/17a89a3916404e77/operativnaya-pamyat-dimm/?stock=now-today-tomorrow-later-out_of_stock",
    "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å SO-DIMM" : "https://www.dns-shop.ru/catalog/17a9b91b16404e77/operativnaya-pamyat-so-dimm/?stock=now-today-tomorrow-later-out_of_stock",
    "–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è": "https://www.dns-shop.ru/catalog/17a89c2216404e77/bloki-pitaniya/?stock=now-today-tomorrow-later-out_of_stock",
    "–ö–æ—Ä–ø—É—Å–∞": "https://www.dns-shop.ru/catalog/17a89c5616404e77/korpusa/?stock=now-today-tomorrow-later-out_of_stock",
    "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤": "https://www.dns-shop.ru/catalog/17a9cc2d16404e77/kulery-dlya-processorov/?stock=now-today-tomorrow-later-out_of_stock",
    "–°–ñ–û": "https://www.dns-shop.ru/catalog/17a9cc9816404e77/sistemy-zhidkostnogo-ohlazhdeniya/?stock=now-today-tomorrow-later-out_of_stock",
    "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã –¥–ª—è –∫–æ—Ä–ø—É—Å–∞": "https://www.dns-shop.ru/catalog/17a9cf0216404e77/ventilyatory-dlya-korpusa/?stock=now-today-tomorrow-later-out_of_stock",
    "–¢–µ—Ä–º–æ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã": "https://www.dns-shop.ru/catalog/17a9cccc16404e77/termointerfejsy/?stock=now-today-tomorrow-later-out_of_stock",
    "–í–æ–¥–æ–±–ª–æ–∫–∏": "https://www.dns-shop.ru/catalog/46a6ee18ae77e78a/vodobloki/?stock=now-today-tomorrow-later-out_of_stock",
    "–†–∞–¥–∏–∞—Ç–æ—Ä—ã –°–ñ–û": "https://www.dns-shop.ru/catalog/c337d10545a1d894/radiatory-szho/?stock=now-today-tomorrow-later-out_of_stock",
    "–ü–æ–º–ø—ã –°–ñ–û": "https://www.dns-shop.ru/catalog/2cacbd38aaea1804/pompy-szho/?stock=now-today-tomorrow-later-out_of_stock",
    "–¢—Ä—É–±–∫–∏ –∏ —à–ª–∞–Ω–≥–∏": "https://www.dns-shop.ru/catalog/36ca7a16b10e23fd/trubki-i-shlangi/?stock=now-today-tomorrow-later-out_of_stock",
    "–§–∏—Ç–∏–Ω–≥–∏ –¥–ª—è –°–ñ–û": "https://www.dns-shop.ru/catalog/7dd2f94fbd40b838/fitingi-dlya-szho/?stock=now-today-tomorrow-later-out_of_stock",
    "–ñ–∏–¥–∫–æ—Å—Ç—å –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "https://www.dns-shop.ru/catalog/d9afd9ed4713ecfd/zhidkost-dlya-oxlazhdeniya/?stock=now-today-tomorrow-later-out_of_stock",
    "–ë—ç–∫–ø–ª–µ–π—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç": "https://www.dns-shop.ru/catalog/ba01d15ff8c9184b/bekplejty-dlya-videokart/?stock=now-today-tomorrow-later-out_of_stock",
    "–¢–µ—Ä–º–æ–ø—Ä–æ–∫–ª–∞–¥–∫–∏": "https://www.dns-shop.ru/catalog/85fe8b0e83901664/termoprokladki/?stock=now-today-tomorrow-later-out_of_stock",
    "–†–∞–¥–∏–∞—Ç–æ—Ä—ã –¥–ª—è –ø–∞–º—è—Ç–∏": "https://www.dns-shop.ru/catalog/17a89a6e16404e77/radiatory-dlya-pamyati/?stock=now-today-tomorrow-later-out_of_stock",
    "–†–∞–¥–∏–∞—Ç–æ—Ä—ã –¥–ª—è SSD M.2": "https://www.dns-shop.ru/catalog/17a9cfd716404e77/radiatory-dlya-ssd-m2/?stock=now-today-tomorrow-later-out_of_stock",
    "–¢–µ—Ä–º–æ–∫–ª–µ–π": "https://www.dns-shop.ru/catalog/17a9cd3616404e77/termoklej/?stock=now-today-tomorrow-later-out_of_stock",
    "SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏": "https://www.dns-shop.ru/catalog/8a9ddfba20724e77/ssd-nakopiteli/?stock=now-today-tomorrow-later-out_of_stock",
    "SSD M.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏": "https://www.dns-shop.ru/catalog/dd58148920724e77/ssd-m2-nakopiteli/?stock=now-today-tomorrow-later-out_of_stock",
    "–ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π": "https://www.dns-shop.ru/catalog/ed60465eacbf3c59/adaptery-dlya-nakopitelej/?stock=now-today-tomorrow-later-out_of_stock",
    "–°–µ—Ä–≤–µ—Ä–Ω—ã–µ SSD": "https://www.dns-shop.ru/catalog/recipe/4fef73f9c0e09a2c/servernye-ssd/?stock=now-today-tomorrow-later-out_of_stock",
    "–î–æ–∫-—Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π": "https://www.dns-shop.ru/catalog/17a9d1c016404e77/dok-stancii-dlya-nakopitelej/?stock=now-today-tomorrow-later-out_of_stock",
    "–í–Ω–µ—à–Ω–∏–µ –±–æ–∫—Å—ã –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π": "https://www.dns-shop.ru/catalog/17a9d18916404e77/vneshnie-boksy-dlya-nakopitelej/?stock=now-today-tomorrow-later-out_of_stock",
    "–°–µ—Ä–≤–µ—Ä–Ω—ã–µ SSD M.2": "https://www.dns-shop.ru/catalog/recipe/5bb555d805b6001e/servernye-ssd-m2/?stock=now-today-tomorrow-later-out_of_stock",
    "HDD 3.5": "https://www.dns-shop.ru/catalog/17a8914916404e77/zhestkie-diski-35/?stock=now-today-tomorrow-later-out_of_stock",
    "HDD 2.5": "https://www.dns-shop.ru/catalog/f09d15560cdd4e77/zhestkie-diski-25/?stock=now-today-tomorrow-later-out_of_stock",
    "–°–µ—Ä–≤–µ—Ä–Ω—ã–µ HDD": "https://www.dns-shop.ru/catalog/17aa4e3216404e77/servernye-hdd/?stock=now-today-tomorrow-later-out_of_stock",
    "–ú–æ–Ω–∏—Ç–æ—Ä—ã": "https://www.dns-shop.ru/catalog/17a8943716404e77/monitory/?stock=now-today-tomorrow-later-out_of_stock"

}

FILENAME = "dns_full.xlsx"
STATE_FILE = "parser_state.json"

def load_existing_uuids(filename, category):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ uuid –∏–∑ Excel –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    ‚Üë –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ uuid
    """
    if not os.path.exists(filename):
        return set()

    try:
        with pd.ExcelFile(filename) as xls:
            sheet_name = category[:31]
            if sheet_name in xls.sheet_names:
                df = pd.read_excel(xls, sheet_name=sheet_name)
                if not df.empty and 'uuid' in df.columns:
                    return set(df['uuid'].astype(str).str.strip())
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å uuid –∏–∑ {category}: {e}")
    return set()

def load_last_uuids(filename):
    if not os.path.exists(filename):
        return {}

    last_uuids = {}
    with pd.ExcelFile(filename) as xls:
        for sheet in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet)
            if not df.empty and 'uuid' in df.columns:
                last_uuids[sheet] = df.iloc[-1]['uuid']
    return last_uuids


def save_partial(category: str, products: list[dict]):
    """
    –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç —Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.
    """
    if not products:
        return

    sheet = category[:31]  # Excel‚Äë–ª–∏–º–∏—Ç
    df_new = pd.DataFrame(products)

    if os.path.exists(FILENAME):
        with pd.ExcelFile(FILENAME) as xls:
            if sheet in xls.sheet_names:
                # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä–æ–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ
                df_old = pd.read_excel(xls, sheet_name=sheet)
                df_new = pd.concat([df_old, df_new], ignore_index=True)

    # –ø–∏—à–µ–º/–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –ª–∏—Å—Ç —Ü–µ–ª–∏–∫–æ–º
    with pd.ExcelWriter(FILENAME, engine="openpyxl", mode="a", if_sheet_exists="replace") as w:
        df_new.to_excel(w, sheet_name=sheet, index=False)

def save_state(current_state):
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(current_state, f, indent=2)


def load_state():
    if not os.path.exists(STATE_FILE):
        return {}
    with open(STATE_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def run(mode="update", is_running=lambda: True):
    driver = make_driver(headless=False)
    last_uuids = load_last_uuids(FILENAME) if mode == "update" else {}
    current_state = load_state() if mode == "update" else {}

    try:
        for cat, url in CATEGORY_LINKS.items():
            if not is_running():
                print("‚õî –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break

            print(f"\n=== {cat} ===")

            # –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤
            driver.get(url)
            total_items = get_total_items(driver)
            print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: {total_items}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ Excel
            if os.path.exists(FILENAME):
                try:
                    df = pd.read_excel(FILENAME, sheet_name=cat[:31])
                    if not df.empty:
                        excel_count = len(df)
                        print(f"üíæ –¢–æ–≤–∞—Ä–æ–≤ –≤ Excel: {excel_count}")
                        if excel_count >= total_items:
                            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                            continue
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç {cat}: {e}")

            products = []

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = []
            for attempt in (1, 2):
                try:
                    cards = grab_cards(driver, url)
                    break
                except WebDriverException as e:
                    print(f"  ‚õî Selenium error (try {attempt}): {e.msg[:90]}‚Ä¶")
                    try:
                        driver.quit()
                    except Exception:
                        pass
                    driver = make_driver(headless=False)

            if not cards:
                print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                continue

            cookies = {c["name"]: c["value"] for c in driver.get_cookies()}

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            last_uuid = last_uuids.get(cat, None)
            existing_uuids = load_existing_uuids(FILENAME, cat)
            skip = True if last_uuid else False

            for c in tqdm(cards, desc=cat):
                if not is_running():
                    print("‚õî –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    save_partial(cat, products)
                    save_state(current_state)
                    driver.quit()
                    return

                if skip:
                    if c["uuid"] == last_uuid:
                        skip = False
                    continue
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ Excel
                if c["uuid"] in existing_uuids:
                    print(f"üîÅ –¢–æ–≤–∞—Ä {c['uuid']} —É–∂–µ –µ—Å—Ç—å –≤ Excel. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                prod = full_product(c["uuid"], cookies)
                prod["uuid"] = c["uuid"]
                prod["–°—Å—ã–ª–∫–∞"] = c["href"]
                products.append(prod)
                current_state['last_processed'] = {"category": cat, "uuid": c["uuid"]}

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            save_partial(cat, products)
            products = []
            time.sleep(1)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞:", e)
    finally:
        try:
            driver.quit()
        except Exception:
            pass
        print("\n‚úÖ dns_full.xlsx –≥–æ—Ç–æ–≤")